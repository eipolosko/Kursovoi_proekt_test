# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Qwes1.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *  # перенос имени
import sys
from homewin import *
from resultwin import *

import sqlite3
import random
class Ui_ques1(QtWidgets.QWidget):
    def __init__(self, name):  # перенос имени
        super().__init__()
        self.name = name  # имя
        self.count = 1800  # время 30 минут
        self.total = 0  # правильные ответы
        self.number = 0 #количество вопросов
        self.a=[]
    def setupUi(self, ques1):
        ques1.setObjectName("ques1")
        ques1.resize(665, 648)
        self.centralwidget = QtWidgets.QWidget(ques1)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(-50, -10, 871, 791))
        self.label.setText("")
        self.label.setPixmap(QtGui.QPixmap("Qwest_back.jpg"))
        self.label.setObjectName("label")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(10, 90, 471, 61))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.label_5 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_2.addWidget(self.label_5)
        self.T1 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.T1.setFont(font)
        self.T1.setText("")
        self.T1.setObjectName("T1")
        self.horizontalLayout_2.addWidget(self.T1)
        self.label_6 = QtWidgets.QLabel(self.horizontalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(False)
        font.setWeight(50)
        self.label_6.setFont(font)
        self.label_6.setObjectName("label_6")
        self.horizontalLayout_2.addWidget(self.label_6)
        self.T2 = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.T2.sizePolicy().hasHeightForWidth())
        self.T2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.T2.setFont(font)
        self.T2.setObjectName("T2")
        self.horizontalLayout_2.addWidget(self.T2)
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(10, 230, 481, 261))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.Q1 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.Q1.setFont(font)
        self.Q1.setObjectName("Q1")
        self.verticalLayout_2.addWidget(self.Q1)
        self.R1 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.R1.setFont(font)
        self.R1.setObjectName("R1")
        self.verticalLayout_2.addWidget(self.R1)
        self.R2 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.R2.setFont(font)
        self.R2.setObjectName("R2")
        self.verticalLayout_2.addWidget(self.R2)
        self.R3 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.R3.setFont(font)
        self.R3.setObjectName("R3")
        self.verticalLayout_2.addWidget(self.R3)
        self.R4 = QtWidgets.QRadioButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.R4.setFont(font)
        self.R4.setObjectName("R4")
        self.verticalLayout_2.addWidget(self.R4)
        self.label_2 = QtWidgets.QLabel(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setStyleSheet("color: rgb(255, 0, 0);")
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.B1 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        self.B1.setFont(font)
        self.B1.setObjectName("B1")
        self.verticalLayout_2.addWidget(self.B1)
        ques1.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(ques1)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 665, 26))
        self.menubar.setObjectName("menubar")
        ques1.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(ques1)
        self.statusbar.setObjectName("statusbar")
        ques1.setStatusBar(self.statusbar)
        self.timer = QTimer(self)  # время
        self.timer.timeout.connect(self.ShowTime)
        self.timer.start(1000)
        self.retranslateUi(ques1)
        QtCore.QMetaObject.connectSlotsByName(ques1)

    def retranslateUi(self, ques1):
        _translate = QtCore.QCoreApplication.translate
        ques1.setWindowTitle(_translate("ques1", "Questins"))
        self.label_5.setText(_translate("ques1", "Имя:"))
        self.label_6.setText(_translate("ques1", "Время:"))
        self.ar1 = self.qwes_rand()
        self.Q1.setText(_translate("ques1", self.ar1[0]))
        self.R1.setText(_translate("ques1", self.ar1[1][1:]))
        self.R2.setText(_translate("ques1", self.ar1[2][1:]))
        self.R3.setText(_translate("ques1", self.ar1[3][1:]))
        self.R4.setText(_translate("ques1", self.ar1[4][1:]))
        self.B1.setText(_translate("ques1", "Следующий вопрос"))
        self.unswer()
        self.B1.clicked.connect(self.main_1)



    def main2(self):
        self.S1 = self.T1.text()
        self.queswin = QtWidgets.QMainWindow()
        self.ui = Ui_resultwin(self.S1)
        self.ui.setupUi(self.queswin)
        self.queswin.show()

    def unswer(self):
        if self.ar1[1][0] == '+':
            self.R1.clicked.connect(self.res_yes)
        if self.ar1[2][0] == '+':
            self.R2.clicked.connect(self.res_yes)
        if self.ar1[3][0] == '+':
            self.R3.clicked.connect(self.res_yes)
        if self.ar1[4][0] == '+':
            self.R4.clicked.connect(self.res_yes)
        if self.ar1[1][0] == '-':
            self.R1.clicked.connect(self.res_no)
        if self.ar1[2][0] == '-':
            self.R2.clicked.connect(self.res_no)
        if self.ar1[3][0] == '-':
            self.R3.clicked.connect(self.res_no)
        if self.ar1[4][0] == '-':
            self.R4.clicked.connect(self.res_no)


    def res_yes(self):
        self.label_2.setText("ответ верный")

    def res_no(self):
        self.label_2.setText("ответ неверный")

    def ShowTime(self):  # Время перенос имени
        if self.count > 0:
            self.count = self.count -1
        S1 = str(self.count // 60)
        S2 = str(self.count % 60)
        S3 = S1 + '.' + S2
        self.T1.setText(str(self.name))
        self.T2.setText(S3)


    def count_Trye(self):
        if self.R1.isChecked() == True and self.ar1[1][0] == '+':  # Правильные ответы
            self.total = self.total + 1
        elif self.R2.isChecked() == True and self.ar1[2][0] == '+':  # Правильные ответы
            self.total = self.total + 1
        elif self.R3.isChecked() == True and self.ar1[3][0] == '+':  # Правильные ответы
            self.total = self.total + 1
        elif self.R4.isChecked() == True and self.ar1[4][0] == '+':  # Правильные ответы
            self.total = self.total + 1
        else:
            self.total = self.total

    def main_1(self):
        self.number += 1
        if self.number<10:#количество вопросов в тесте
            self.label_2.setText(" ")
            self.count_Trye()#вызов функции проверки правильности ответа
            self.next_qwestions()#вызов функции следующего вопроса
        else:
            self.count_Trye()
            self.queswin = QtWidgets.QMainWindow()
            self.ui = Ui_resultwin(self.name, self.count, self.total)
            self.ui.setupUi(self.queswin)
            self.queswin.show()

    def qwes2(self):#формулировка вопроса из базы данных
        _translate = QtCore.QCoreApplication.translate
        self.ar1 = self.qwes_rand() #вызов функции,которая возвращает вопрос с вариантами ответов из базы данных(рандомный вывод)
        self.Q1.setText(_translate("ques1", self.ar1[0]))
        self.R1.setText(_translate("ques1", self.ar1[1][1:]))
        self.R2.setText(_translate("ques1", self.ar1[2][1:]))
        self.R3.setText(_translate("ques1", self.ar1[3][1:]))
        self.R4.setText(_translate("ques1", self.ar1[4][1:]))

    def next_qwestions(self):#вопрос для теста
        self.hide_radio_buttons() # удаляет radiobutton
        self.show_radio_buttons()# показывает чистые radiobutton
        self.qwes2() #добавляет новый вопрос
        self.unswer()#вывод результата ответа(верно/неверно)

    def hide_radio_buttons(self):  #удалить все radiobutton
        for btn in [self.R1, self.R2, self.R3, self.R4]:
            btn.setAutoExclusive(False)
            btn.setChecked(False)
            btn.repaint()
            btn.setAutoExclusive(True)
            btn.hide()

    def show_radio_buttons(self):#показать radiobutton
        for btn in [self.R1, self.R2, self.R3, self.R4]:
            btn.show()

    def qwes_rand(self):#база данных вопросов
        conn = sqlite3.connect('table_Tes')
        cursor = conn.cursor()
        cursor.execute(
            '''CREATE TABLE IF NOT EXISTS table_Tes(id INTEGER PRIMARY KEY AUTOINCREMENT, Qwestion Text, answer_1 Text,answer_2 Text,answer_3 Text,answer_4 Text) ''')
        l = [('Какая библиотека отвечает за время?', '-localtime', '-clock', '+time', '-Time'),
             ('Что такое list()?', '-множество', '+список', '-словарь', '-кортеж'),
             ('Как получить данные от пользователя?', '-Использовать метод readLine()', '-Использовать метод get()', '-Использовать метод read()', '+Использовать метод input()'),
             ('Где правильно создана переменная?', '-$num = 2', '-Нет подходящего варианта', '-var num = 2', '+num = float(2)'),
             ('Как вывести список методов и атрибутов объекта x?', '+dir(x)', '-info(x)', '-?x', '-help(x)'),
             ('Как писать комментарии на Python?', '-Комментарии начинаются с символа %', '-Комментарии начинаются с символа /', '-Комментарии начинаются с символа @', '+Комментарии начинаются с символа #.'),
             ('Что такое dict()?', '+словарь', '-список', '-множество', '-кортеж'),
             ('Что такое tuple()?', '-множество', '+кортеж', '-словарь', '-список'),
             ('Что выведет данный код?\n  import math\n  print(math.ceil(1.5))', '-1', '+2', '-1.5', '-ошибку'),
             ('Что выведет данный код?\n  import math\n  print(math.fabs(-5.1))', '+5.1', '--5.1', '--6', '-ошибку'),
             ('Что выведет данный код?\n  import math\n  print(math.floor(1.8))', '-2', '-1.8', '+1', '-ошибку'),
             ('Что выведет данный код?\n  import math\n  print(math.fmod(6,3.5))', '+2.5', '-3.5', '-1', '-ошибку'),
             ("Что выведет данный код?\n  print('abc def'.capitalize())", '-Abc Def', '-ABC DEF', '+Abc def', '-ошибку'),
             ("Что выведет данный код?\n  print('123'.capitalize())", '-A23', '-ничего', '+123', '-ошибку'),
             ("Что выведет данный код?\n  print('a'.capitalize())", '+A', '-a', '-Aa', '-ошибку'),
             ("Что выведет данный код?\n  print('2'=='2.0')", '-True', '+False', '-ничего', '-ошибку'),
             ("Что выведет данный код?\n  print('5'*2)", '-10', '+55', '-5*2', '-ошибку'),
             ("Что выведет данный код?\n  print('5'*2)", '-10', '+55', '-5*2', '-ошибку'),
             ("Что выведет данный код?\n  a='eggs'\n  print(a[3:5:-1])", '-eg', '-s', '+ничего', '-ошибку'),
             ("Что выведет данный код?\n  a={1,2}\n  print(type(a))", "+<class'set'>", "-<class'dict'>", "-<class'list'>", "-ошибку"),
             ('Какой из  вариантов используется для объявления\nфункции в Python?', '-function someF()', '-def someF()', '+def someF():', '-function someF():'),
             ('Какой из  вариантов является допустимым для\nцикла в Python?', '-for(a = 0; a < 3; a++)', '-for a in range 3','-for a loop 3:', '+for a in range(1,3):'),
             ]
        cursor.executemany('''INSERT INTO table_Tes(Qwestion,answer_1,answer_2,answer_3,answer_4) VALUES (?,?,?,?,?)''',l)
        # conn.commit()
        cursor.execute('''SELECT id FROM table_Tes''')
        ar = []
        cursor.execute('''SELECT id FROM table_Tes''')
        k = cursor.fetchall()
        r = random.choice(k)
        while r in self.a:
            r = random.choice(k)
        cursor.execute('''SELECT Qwestion,answer_1,answer_2,answer_3,answer_4 FROM table_Tes WHERE id=?''', (r))
        oo = cursor.fetchall()
        self.a.append(r)
        for i in oo:
            for j in i:
                ar.append(j)
        return ar

if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    ques1 = QtWidgets.QMainWindow()
    ui =Ui_ques1()
    ui.setupUi(ques1)
    ques1.show()
    sys.exit(app.exec_())